{"version":3,"file":"key-values-property-editor-ui.element-Sjaxx7tQ.js","sources":["../../../Client/src/propertyeditors/key-values-property-editor-ui.element.ts"],"sourcesContent":["import { LitElement, css, html, customElement, property, state, query, repeat } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbPropertyEditorUiElement } from \"@umbraco-cms/backoffice/property-editor\";\r\nimport { UmbPropertyValueChangeEvent } from \"@umbraco-cms/backoffice/property-editor\";\r\n\r\n/*\r\nThis is a work in progress\r\n\r\nWHAT WORKS NOW\r\n* Not much - can add items to a list - the save and publish does store to the db and it loads.\r\n* I do check for a new property so that it works to add the first item\r\n\r\nTODO:\r\n1) I'm using the this.value directly, I think it should use the _items and just update the value for save and publish / storing the\r\ndata. What I can't work out is how I'd init _items as I'm unclear on how this.value is populated in the first place - I seem to declare it and it's magically assigned (perhaps in UmbPropertyEditorUiElement?)\r\n2) Render a list of key value pair text fields with a sorter and a delete button (like the multiple text string controls)\r\n2)a Allow for edits on existing items\r\n2b) Check the key is unique and not null on add \r\n3) Wire everything up.\r\n4) Maybe a backend property type convertor. - if we use a key value pair then recheck items are unique - what to do if some junk duplicates are there?\r\n*/\r\n\r\n// todo - should these be here or inside the custom element> \r\ntype UmbCommunityKeyValue = {\r\n  key: string;\r\n  value: string;\r\n};\r\ntype ArrayOf<T> = T[];\r\n\r\n@customElement('key-values-property-editor-ui')\r\nexport default class UmbCommunityKeyValuesPropertyEditorUIElement extends LitElement implements UmbPropertyEditorUiElement {\r\n  @property()\r\n  public value: ArrayOf<UmbCommunityKeyValue> = [];\r\n\r\n  /* this isn't used at the moment - how to init with the values from value ? */\r\n  @state()\r\n  private _items: ArrayOf<UmbCommunityKeyValue> = [\r\n    {\r\n      key: \"test 1\",\r\n      value: \"A string value that goes with test 1\"\r\n    },\r\n    {\r\n      key: \"test 2\",\r\n      value: \"A different string\"\r\n    }\r\n  ];\r\n\r\n  @query('#key-value-new-key')\r\n  newNameInp!: HTMLInputElement;\r\n\r\n  @query('#key-value-new-value')\r\n  newValueInp!: HTMLInputElement;\r\n\r\n  #onAddRow() {\r\n    const currentInputTyped: UmbCommunityKeyValue = {\r\n      key: this.newNameInp.value,\r\n      value: this.newValueInp.value\r\n    };\r\n\r\n    // update _items though this isn't used at the moment\r\n    // can't push items on this array - not extensible so copy the array and add on\r\n    this._items = [...this._items, currentInputTyped];\r\n\r\n    // check the value is an array, the concatenate o/w create an array with this as the first item\r\n    this.value = Array.isArray(this.value) ? [...this.value, currentInputTyped] : [currentInputTyped];\r\n\r\n    this.#dispatchChangeEvent();\r\n  }\r\n\r\n  #dispatchChangeEvent() {\r\n    this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n  }\r\n\r\n  renderTranslationList() {\r\n    // this is a simple example of just writing out the values - to be replaced with the fields below\r\n    if (this.value?.length) {\r\n      return html`\r\n            <ul>\r\n                ${this.value.map((translation) =>\r\n        html`<li>${translation.key} ${translation.value}</li>`)}\r\n            </ul>`\r\n    } else {\r\n      return html`<span>create an item</span>`;\r\n    }\r\n  }\r\n\r\n  renderTranslationFields() {\r\n   if (this.value?.length) {\r\n     return html`\r\n           ${repeat(this.value, (item) => item.key, (item, index) => {\r\n             return html`<p>${index}: ${item.key}: ${item.value}</p>`;\r\n     })}\r\n           `;\r\n  \r\n     // todo - do something similar to the umbraco multiple text string - so create an item element and render a list of these.\r\n     // the core example uses UUIInputElement which doesn't seem to be available\r\n  \r\n     //return html`\r\n     //${repeat(\r\n     //    this.value,\r\n     //    (item, index) => index,\r\n     //    (item, index) => html`\r\n     //\t\t<umb-input-multiple-text-string-item\r\n     //\t\t\tname=\"item-${index}\"\r\n     //\t\t\tdata-sort-entry-id=${item}\r\n     //\t\t\trequired\r\n     //\t\t\trequired-message=\"Item ${index + 1} is missing a value\"\r\n     //\t\t\tvalue=${item}>\r\n     //\t\t</umb-input-multiple-text-string-item>\r\n     //\t`,\r\n     //    // \t  \t\t\t\t    @enter=${this.#onAdd}\r\n     //    // @delete=${(event: UmbDeleteEvent) => this.#deleteItem(event, index)}\r\n     //\t//\t\t@input=${(event: UmbInputEvent) => this.#onInput(event, index)}\r\n     //)}\r\n     //`;\r\n   } else {\r\n     return html`<span>You don't have any items yet.</span>`;\r\n   }\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n        ${this.renderTranslationList()}\r\n        ${this.renderTranslationFields()}\r\n            <uui-input\r\n                id=\"key-value-new-key\"\r\n                class=\"element\"\r\n                label=\"text input\"\r\n                value=\"\"\r\n            >\r\n            </uui-input>\r\n            <uui-input\r\n                id=\"key-value-new-value\"\r\n                class=\"element\"\r\n                label=\"text input\"\r\n                value=\"\"\r\n            >\r\n            </uui-input>\r\n            <div id=\"wrapper\"> \r\n                <uui-button\r\n                    id=\"add-row-button\"\r\n                    class=\"element\"\r\n                    look=\"primary\"\r\n                    label=\"Add a row\"\r\n                    @click=${this.#onAddRow}\r\n                >\r\n                    Add a row\r\n                </uui-button>\r\n            </div>\r\n        `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n            #wrapper {\r\n                margin-top: 10px;\r\n                display: flex;\r\n                gap: 10px;\r\n            }\r\n            .element {\r\n                width: 100%;\r\n            }\r\n        `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'key-values-property-editor-ui': UmbCommunityKeyValuesPropertyEditorUIElement;\r\n  }\r\n}\r\n"],"names":["_UmbCommunityKeyValuesPropertyEditorUIElement_instances","onAddRow_fn","dispatchChangeEvent_fn","UmbCommunityKeyValuesPropertyEditorUIElement","LitElement","__privateAdd","_a","html","translation","repeat","item","index","__privateMethod","currentInputTyped","UmbPropertyValueChangeEvent","css","__decorateClass","property","state","query","customElement"],"mappings":";;;;;;;;8OAAAA,GAAAC,GAAAC;AA6BqB,IAAAC,IAArB,cAA0EC,EAAiD;AAAA,EAA3H,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAL,CAAA,GAEE,KAAO,QAAuC,CAAC,GAI/C,KAAQ,SAAwC;AAAA,MAC9C;AAAA,QACE,KAAK;AAAA,QACL,OAAO;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL,OAAO;AAAA,MAAA;AAAA,IAEX;AAAA,EAAA;AAAA,EA4BA,wBAAwB;;AAElB,YAAAM,IAAA,KAAK,UAAL,QAAAA,EAAY,SACPC;AAAA;AAAA,kBAEK,KAAK,MAAM,IAAI,CAACC,MAC1BD,QAAWC,EAAY,GAAG,IAAIA,EAAY,KAAK,OAAO,CAAC;AAAA,qBAGlDD;AAAA,EACT;AAAA,EAGF,0BAA0B;;AACrB,YAAAD,IAAA,KAAK,UAAL,QAAAA,EAAY,SACPC;AAAA,aACCE,EAAO,KAAK,OAAO,CAACC,MAASA,EAAK,KAAK,CAACA,GAAMC,MACvCJ,OAAUI,CAAK,KAAKD,EAAK,GAAG,KAAKA,EAAK,KAAK,MACzD,CAAC;AAAA,eAyBKH;AAAA,EACT;AAAA,EAGD,SAAS;AACA,WAAAA;AAAA,UACD,KAAK,sBAAuB,CAAA;AAAA,UAC5B,KAAK,wBAAyB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAqBXK,QAAKZ,GAASC,CAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAoB3C;AAtIAD,IAAA,oBAAA,QAAA;AAuBEC,IAAS,WAAG;AACV,QAAMY,IAA0C;AAAA,IAC9C,KAAK,KAAK,WAAW;AAAA,IACrB,OAAO,KAAK,YAAY;AAAA,EAC1B;AAIA,OAAK,SAAS,CAAC,GAAG,KAAK,QAAQA,CAAiB,GAGhD,KAAK,QAAQ,MAAM,QAAQ,KAAK,KAAK,IAAI,CAAC,GAAG,KAAK,OAAOA,CAAiB,IAAI,CAACA,CAAiB,GAEhGD,EAAA,MAAKZ,GAALE,CAAA,EAAA,KAAA,IAAA;AACF;AAEAA,IAAoB,WAAG;AAChB,OAAA,cAAc,IAAIY,GAA6B;AACtD;AAzCmBX,EA0HZ,SAAS;AAAA,EACdY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUF;AAnIOC,EAAA;AAAA,EADNC,EAAS;AAAA,GADSd,EAEZ,WAAA,SAAA,CAAA;AAICa,EAAA;AAAA,EADPE,EAAM;AAAA,GALYf,EAMX,WAAA,UAAA,CAAA;AAYRa,EAAA;AAAA,EADCG,EAAM,oBAAoB;AAAA,GAjBRhB,EAkBnB,WAAA,cAAA,CAAA;AAGAa,EAAA;AAAA,EADCG,EAAM,sBAAsB;AAAA,GApBVhB,EAqBnB,WAAA,eAAA,CAAA;AArBmBA,IAArBa,EAAA;AAAA,EADCI,EAAc,+BAA+B;AAAA,GACzBjB,CAAA;"}