{"version":3,"file":"key-values-property-editor-ui.element-DHGhCGEc.js","sources":["../../../Client/src/propertyeditors/key-values-property-editor-ui.element.ts"],"sourcesContent":["import { css, html, customElement, property, state, query, repeat } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbLitElement } from '@umbraco-cms/backoffice/lit-element';\r\nimport { umbConfirmModal } from '@umbraco-cms/backoffice/modal';\r\nimport { UmbPropertyEditorUiElement } from \"@umbraco-cms/backoffice/property-editor\";\r\nimport { UmbPropertyValueChangeEvent } from \"@umbraco-cms/backoffice/property-editor\";\r\nimport { type UmbPropertyEditorConfigCollection } from '@umbraco-cms/backoffice/property-editor';\r\n//import { UmbValidationContext } from \"@umbraco-cms/backoffice/validation\";\r\n\r\n/*\r\nThis is a work in progress\r\n\r\nWHAT WORKS NOW\r\n* You can add, delete and update items - the save and publish stores to the db and it loads.\r\n* I do check for a new property so that it works to add the first item\r\n* Can enable / disable a uniqueness check on the key\r\n\r\nTODO:\r\n1) Sorter - UmbSorterController expects a string array - how would we use this?\r\n2) Maybe a backend property type convertor. - if we use a key value pair then recheck items are unique - what to do if some junk duplicates are there?\r\n3) Use UmbValidationContext properly - couldn't get it to play nicely\r\n*/\r\n\r\n// todo - should these be here or inside the custom element\r\ntype UmbCommunityKeyValue = {\r\n  key: string;\r\n  value: string;\r\n};\r\ntype ArrayOf<T> = T[];\r\n\r\n@customElement('key-values-property-editor-ui')\r\nexport default class UmbCommunityKeyValuesPropertyEditorUIElement extends UmbLitElement implements UmbPropertyEditorUiElement {\r\n\r\n  @property()\r\n  public value: ArrayOf<UmbCommunityKeyValue> = [];\r\n\r\n  @state()\r\n  private _items: ArrayOf<UmbCommunityKeyValue> = [];\r\n\r\n  @state()\r\n  private _uniquekeys?: boolean;\r\n\r\n  @property({ attribute: false })\r\n  public set config(config: UmbPropertyEditorConfigCollection) {\r\n    this._uniquekeys = config.getValueByAlias(\"uniquekeys\");\r\n  }\r\n\r\n  @state()\r\n  private _showKeyErrorEmpty: boolean = false;\r\n\r\n  @state()\r\n  private _showKeyErrorNotUnique: boolean = false;\r\n\r\n  @query('#key-value-new-key')\r\n  newKeyInp!: HTMLInputElement;\r\n\r\n  @query('#key-value-new-value')\r\n  newValueInp!: HTMLInputElement;\r\n\r\n  // use the connectedCallback as suggested by Jacob Overgaard as this is where the this.value is available and assigned\r\n  connectedCallback() {\r\n    super.connectedCallback();\r\n\r\n    // in connectedCallback the this.value is ready\r\n    this._items = this.value;\r\n  }\r\n\r\n  // todo - couldn't make this work\r\n  //#validation = new UmbValidationContext(this);\r\n\r\n  #onAddRow() {\r\n    // todo - always comes back as valid?\r\n    //this.#validation.validate().then(() => {\r\n    //  console.log('Valid');\r\n    //}, () => {\r\n    //  console.log('Invalid');\r\n    //});\r\n\r\n    // check the key is non-empty\r\n    if (this.newKeyInp.value == '') {\r\n      this._showKeyErrorEmpty = true;\r\n      return;\r\n    }\r\n\r\n    let newKeyTrimmed = this.newKeyInp.value.trim();\r\n\r\n    // if the config is set check if the value is unique\r\n    if (this._uniquekeys && this._items.some(i => i.key === newKeyTrimmed)) {\r\n        this._showKeyErrorNotUnique = true;\r\n        return;\r\n    }\r\n\r\n    const currentInputTyped: UmbCommunityKeyValue = {\r\n      key: newKeyTrimmed,\r\n      value: this.newValueInp.value\r\n    };\r\n\r\n    // check the value is an array, the concatenate o/w create an array with this as the first item\r\n    this._items = Array.isArray(this.value) ? [...this.value, currentInputTyped] : [currentInputTyped];\r\n\r\n    this.newKeyInp.value = '';\r\n    this.newValueInp.value = '';\r\n\r\n    this.#updatePropertyEditorValue();\r\n  }\r\n\r\n  #onDelete(index: number) {\r\n    umbConfirmModal(this, { headline: 'Delete?', content: 'Are you sure you want to delete this item?' })\r\n      .then(() => {\r\n        this._items = [...this._items.slice(0, index), ...this._items.slice(index + 1)];\r\n        this.#updatePropertyEditorValue();\r\n      })\r\n      .catch(() => {\r\n        //console.log('Delete cancelled')\r\n      })\r\n  }\r\n\r\n  private _onEditRowValue(e: InputEvent, index: number) {\r\n    let currentItem = this._items[index];\r\n\r\n    const updatedItem: UmbCommunityKeyValue = {\r\n      key: currentItem.key,\r\n      value: (e.target as HTMLInputElement).value\r\n    };\r\n\r\n    this._items = [...this._items.slice(0, index), updatedItem, ...this._items.slice(index + 1)];\r\n\r\n    this.#updatePropertyEditorValue();\r\n  }\r\n\r\n  private _onEditNewKey() {\r\n    this._showKeyErrorEmpty = false;\r\n    this._showKeyErrorNotUnique = false;\r\n  }\r\n\r\n  #updatePropertyEditorValue() {\r\n    this.value = this._items;\r\n    this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n  }\r\n\r\n  // Prevent valid events from bubbling outside the message element\r\n  #onValid(event: Event) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  // Prevent invalid events from bubbling outside the message element\r\n  #onInvalid(event: Event) {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  renderItemsList() {\r\n    // writes out the list with fields to update\r\n    if (this._items?.length) {\r\n      return html`\r\n      <ul>\r\n        ${repeat(this._items, (item) => item.key, (item, index) => html`\r\n            <li>\r\n              <umb-form-validation-message id=\"validation-message\" class=\"wrapper\" @invalid=${this.#onInvalid} @valid=${this.#onValid}>\r\n                <uui-input\r\n                  class=\"kv-input\"\r\n                  label=\"text input\"\r\n                  type=\"text\"\r\n                  name=\"${index}\"\r\n                  value=\"${item.key}\"\r\n                  required=true\r\n                  required-message=\"A key value is required\"\r\n                  disabled=\"disabled\"\r\n                  ></uui-input>\r\n                <uui-input\r\n                  class=\"kv-input\"\r\n                  label=\"text input\"\r\n                  type=\"text\"\r\n                  name=\"${index}\"\r\n                  value=\"${item.value}\"\r\n                  @input=${(e: InputEvent) => this._onEditRowValue(e, index)}>\r\n                </uui-input>\r\n                <uui-button\r\n\t\t\t\t\t\t      compact\r\n\t\t\t\t\t\t      color=\"danger\"\r\n\t\t\t\t\t\t      label=\"remove ${item.key}\"\r\n\t\t\t\t\t\t      look=\"outline\"\r\n\t\t\t\t\t\t      @click=${() => this.#onDelete(index)}>\r\n\t\t\t\t\t\t      <uui-icon name=\"icon-trash\"></uui-icon>\r\n\t\t\t\t\t      </uui-button>\r\n              </umb-form-validation-message>\r\n            </li> `\r\n      )\r\n        }\r\n      </ul>`;\r\n    } else {\r\n      return html`<span>You don't have any items yet</span>`;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return html`\r\n        ${this.renderItemsList()}\r\n            <hr/>\r\n            <div class=\"wrapper\">\r\n              <uui-input\r\n                  id=\"key-value-new-key\"\r\n                  class=\"kv-input\"\r\n                  label=\"text input\"\r\n                  placeholder=\"key*\"\r\n                  value=\"\"\r\n                  @input=${this._onEditNewKey}\r\n                  required=true\r\n                  required-message=\"A key value is required\"\r\n              >\r\n              </uui-input>\r\n              <uui-input\r\n                  id=\"key-value-new-value\"\r\n                  class=\"kv-input\"\r\n                  label=\"text input\"\r\n                  value=\"\"\r\n                  placeholder=\"value\"\r\n              >\r\n              </uui-input>\r\n              <uui-button\r\n                  id=\"add-row-button\"\r\n                  class=\"kv-input\"\r\n                  look=\"primary\"\r\n                  label=\"Add item\"\r\n                  @click=${this.#onAddRow}\r\n              >\r\n                  Add item\r\n              </uui-button>\r\n            </div>\r\n            <span id=\"kv-new-row-error-empty\" class=${this._showKeyErrorEmpty ? 'kv-error show' : 'kv-error'}>Error: Key cannot be empty</span>\r\n            <span id=\"kv-new-row-error-not-unique\" class=${this._showKeyErrorNotUnique ? 'kv-error show' : 'kv-error'}>Error: Key already exists</span>\r\n        `;\r\n  }\r\n\r\n  static styles = [\r\n    css`\r\n      .wrapper {\r\n          margin-top: 10px;\r\n          display: flex;\r\n          gap: 10px;\r\n      }\r\n      .kv-input {\r\n        flex: 1;\r\n      }\r\n      ul {\r\n        list-style: none;\r\n        padding-inline-start: 0;\r\n      }\r\n      /* the absolute pain to find this is how to change the disabled font color.. */\r\n      uui-input {\r\n        --uui-color-disabled-contrast: black;\r\n      }\r\n      .kv-error {\r\n        color: var(--uui-color-danger-standalone);\r\n        display: none;\r\n      }\r\n      .kv-error.show {\r\n        display: block;\r\n      }\r\n      `,\r\n  ];\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'key-values-property-editor-ui': UmbCommunityKeyValuesPropertyEditorUIElement;\r\n  }\r\n}\r\n"],"names":["_UmbCommunityKeyValuesPropertyEditorUIElement_instances","onAddRow_fn","onDelete_fn","updatePropertyEditorValue_fn","onValid_fn","onInvalid_fn","UmbCommunityKeyValuesPropertyEditorUIElement","UmbLitElement","__privateAdd","config","index","updatedItem","__privateMethod","_a","html","repeat","item","e","newKeyTrimmed","currentInputTyped","umbConfirmModal","UmbPropertyValueChangeEvent","event","css","__decorateClass","property","state","query","customElement"],"mappings":"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"}